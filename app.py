# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d7cwbkOcjvnZ5B51nSQZeGuNpMH-zTTR
"""

from PIL import Image
import torch
import numpy as np
from lang_sam import LangSAM
from lang_sam.utils import draw_image
from diffusers import StableDiffusionInpaintPipeline

# Initialize models
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = LangSAM()
inpaint = StableDiffusionInpaintPipeline.from_pretrained(
    "stabilityai/stable-diffusion-2-inpainting",
    torch_dtype=torch.float16,
)
inpaint.to(device)

# Define function to process image, perform segmentation, and inpainting
def final_pipeline(image_pil, source_prompt, target_prompt):
    masks, boxes, labels, logits = model.predict(image_pil, source_prompt)
    image_array = np.array(image_pil)
    image_with_masks = draw_image(image_array, masks, boxes, labels)
    masks_np = [mask.squeeze().detach().cpu().numpy() for mask in masks]

    selected_label = source_prompt.lower()
    mask_image_np = None

    for mask, label in zip(masks_np, labels):
        if label.lower() == selected_label:
            mask_image_np = mask
            break

    if mask_image_np is None:
        raise ValueError(f"No mask found for label '{source_prompt}'")

    mask_image_pil = Image.fromarray(mask_image_np)
    inpainted_image = inpaint(prompt=target_prompt, image=image_pil, mask_image=mask_image_pil).images[0]

    return inpainted_image